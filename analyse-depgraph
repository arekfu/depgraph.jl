#!/usr/bin/env julia
# vi: ft=julia

using ArgParse

arg_settings = ArgParseSettings()

@add_arg_table arg_settings begin
  "-o", "--output"
    help = "name of the dot output file"
    arg_type = AbstractString
  "-t", "--transitive-reduction"
    help = "apply a simplified form of transitive reduction"
    action = :store_true
  "-c", "--condensation"
    help = "apply condensation"
    action = :store_true
  "-l", "--library"
    help = "make a comma-separated list of objects appear as a library. If the library name starts with a '+', the nodes in the library are condensed into a single node."
    metavar = "LIBRARY_NAME:OBJ1,OBJ2,..."
    action = :append_arg
  "-x", "--exclude"
    help = "exclude an object from the graph"
    metavar = "EXCLUDE_REGEX"
    action = :append_arg
  "-f", "--focus"
    help = "focus on the given nodes"
    arg_type = AbstractString
    action = :append_arg
  "--debug"
    help = "print debugging information about why two libraries are connected"
    metavar = "LIB1:LIB2"
    arg_type = AbstractString
  "-n", "--neighborhood-size"
    help = "size of the neighborhood to plot"
    arg_type = Int
    default = nothing
  "-d", "--neighborhood-direction"
    help = "direction in which neighborhoods are explored (\"in\", \"out\", \"both\")"
    arg_type = AbstractString
    default = "out"
    range_tester = x -> x=="in" || x=="out" || x=="both"
  "--label-length"
    help = "maximum label length"
    arg_type = Int
    default = 20
  "--hide-ellipsis-edges"
    help = "hide ellipsis edges (they indicate where the graph was cut by the -n option)"
    action = :store_false
    dest_name = "ellipsis-edges"
  "DICTFILE"
    help = "file containing the dependency dictionary"
    arg_type = AbstractString
    required = true
end

parsed_args = parse_args(arg_settings)

if parsed_args["output"] == nothing
  output_filename = "depgraph.dot"
else
  output_filename = parsed_args["output"]
end

label_len = parsed_args["label-length"]
if label_len==nothing
  label_len = typemax(Int)
end

dict_filename = parsed_args["DICTFILE"]

do_transitive_reduction = parsed_args["transitive-reduction"]
do_condensation = parsed_args["condensation"]
do_ellipsis_edges = parsed_args["ellipsis-edges"]

if parsed_args["debug"] != nothing
  debug_from, debug_to = split(parsed_args["debug"], ':')
else
  debug_from = debug_to = nothing
end

focus_nodes = parsed_args["focus"]
exclude_nodes = parsed_args["exclude"]

neigh_size = parsed_args["neighborhood-size"]
if neigh_size==nothing
  neigh_size = typemax(Int)
elseif isempty(focus_nodes)
  error("the -n option does not make sense without -f")
end

neigh_dir = Symbol(parsed_args["neighborhood-direction"])

libraries_arg = parsed_args["library"]
libraries = Dict{AbstractString,Vector{AbstractString}}()
for library_arg in libraries_arg
  library_split = split(library_arg, ':')
  library_name = library_split[1]
  obj_split = split(library_split[2], ',')
  libraries[library_name] = obj_split
end

# script starts here

using JLD       # for persistency
using LightGraphs

include("labelledgraph.jl")


info("loading dictionary...")
@load(dict_filename, depgraph)

info("converting to LightGraphs.DiGraph...")
graph = convert(LabelledDiGraph, depgraph)

info("generating subgraph...")
if !isempty(focus_nodes)
  focus_regex = Regex(join(focus_nodes, '|'))
  generator_indices = find(l -> ismatch(focus_regex, l), graph.labels)
else
  focus_regex = nothing
  generator_indices = collect(1:nv(graph))
end
new_vertices, graph′ = egonet(graph, generator_indices, neigh_size, dir=neigh_dir)
info("subgraph has $(nv(graph′)) vertices")
info("subgraph has $(ne(graph′)) edges")

# print some useful stats about the resulting subgraph
cyclic = is_cyclic(graph′)
verb = cyclic ? "is" : "is not"
connected = is_connected(graph′)
info("subgraph $verb cyclic")
verb = connected ? "is" : "is not"
info("subgraph $verb connected")
info("subgraph indegree:  min=$(δin(graph′)), max=$(Δin(graph′))")
info("subgraph outdegree: min=$(δout(graph′)), max=$(Δout(graph′))")
info("subgraph density: $(density(graph′))")
if !cyclic
  # the LightGraphs implementations of these functions only work for acyclic
  # graphs
  info("subgraph radius: $(radius(graph′))")
  info("subgraph diameter: $(diameter(graph′))")
  info("subgraph eccentricity: $(eccentricity(graph′))")
end

if do_ellipsis_edges
  info("adding ellipsis edges...")
  graph′ = add_ellipsis_edges(graph, graph′, new_vertices)
end
graph = graph′

# expand any regexes appearing in the library specifications
expanded_libs = Dict{AbstractString,Vector{AbstractString}}()
for (libname, objs) in libraries
  mask = broadcast(o -> startswith(o, '#'), objs)
  labels = objs[!mask]
  regexes = map(s -> Regex(s[2:end]), objs[mask])

  indices = IntSet(findin(graph.labels, labels))
  for r in regexes
    matching = find(o -> ismatch(r, o), graph.labels)
    union!(indices, matching)
  end
  expanded_libs[libname] = graph.labels[collect(indices)]
end
libraries = expanded_libs


if debug_from!=nothing && debug_to!=nothing
  for f in libraries[debug_from]
    index = findfirst(graph.labels, f)
    neighs = graph.labels[out_neighbors(graph.graph, index)]
    filter!(l -> l in libraries[debug_to], neighs)
    if !isempty(neighs)
      info("DEBUG: $f --> $(join(neighs, ", "))")
    end
  end
end

# condense libraries, if required
libs_to_condense = filter(l -> startswith(l, '+'), collect(keys(libraries)))
if !isempty(libs_to_condense)
  info("condensing libraries $(join(libs_to_condense, ", "))...")
  graph = condense_these(graph, libs_to_condense, libraries)
end
for l in libs_to_condense
  delete!(libraries, l)
end

info("computing strongly connected components...")
scc, cond_labels = strongly_connected_components(graph)
nontrivial_scc = count(s -> length(s)>1, scc)
len_largest_scc, index_largest_scc = findmax(map(length, scc))
#largest_scc = sort(scc[index_largest_scc])
#largest_scc_subgraph = induced_subgraph(graph, largest_scc)
#period_largest_scc = period(largest_scc_subgraph)
#info("subgraph has $(length(scc)) scc ($nontrivial_scc non-trivial, ",
#     "largest=$len_largest_scc with period $period_largest_scc)")
info("subgraph has $(length(scc)) scc ($nontrivial_scc non-trivial, ",
     "largest=$len_largest_scc)")

if do_condensation
  info("condensing strongly connected components...")
  graph = condensation(graph)
end

# exclude any requested node
if !isempty(exclude_nodes)
  info("excluding selected nodes...")
  exclude_regex = Regex(join(exclude_nodes, '|'))
  exclude_indices = find(l -> ismatch(exclude_regex, l), graph.labels)
  generator_indices = collect(setdiff!(IntSet(1:nv(graph)), exclude_indices))
  graph = induced_subgraph(graph, generator_indices)
end

info("graph has $(nv(graph)) vertices")
info("graph has $(ne(graph)) edges")
if do_transitive_reduction
  info("reducing...")
  graph = transitive_reduction(graph)
  info("reduced graph has $(ne(graph)) edges")
end

info("saving to $output_filename...")
to_dotfile(graph, output_filename; highlight=focus_regex,
                                   label_len=label_len,
                                   libraries=libraries,
                                   cli=ARGS)
